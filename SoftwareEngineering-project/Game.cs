using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SoftwareEngineering_project
{
    public class Game
    {
        bool ongoing = false;
        int countRealPieces; // how many real pieces generated by GM so far
        int minNrRealPieces = MyGlobals.nrGoals;
        int maxNrRealPieces = 2*MyGlobals.nrGoals - MyGlobals.rnd.Next(1, MyGlobals.nrGoals); // nr real pieces smaller than nr total goals
        public List<Player> players;


        public Game() {
            this.ongoing = true;
            players = MyGlobals.players; // should be passed as a param after refactoring
        }

        
        public void addPieceInGame() {

            // check if there isn't aready a piece on the board
            foreach (var pi in MyGlobals.pieces) {
                if (pi.getOwner() == null) {
                    return;
                }
            }

            // add piece to board only if there isn't alredy a free piece
            Piece p = new Piece();

            // check if there is a free place to put the piece
            if (getMaxAvailableTiles() > 0) {

                // at this point, there is no free piece 
                
                // if the piece is a sham, add it
                if (p.getSham())
                {
                    MyGlobals.pieces.Add(p);
                }
                //if the piece is not a sham, add it, as long as the number of real pieces is smaller than the number 
                // of total goals 
                else {
                    if (countRealPieces < maxNrRealPieces) {
                        MyGlobals.pieces.Add(p);
                        countRealPieces++;
                    }                   
                }
            }
        }


        // returns the number o free available positions
        public static int getMaxAvailableTiles()
        {
            return MyGlobals.Height* MyGlobals.Width - MyGlobals.players.Count() - MyGlobals.pieces.Count();
        }


        // returns character 't' if it was a tie, and 'n' if not finished
        public char determineWinner() {
            int discoveredByBlue = 0;
            int discoveredByRed = 0;

            // count discovered goals by blue team
            foreach (var goal in MyGlobals.goalsBlue) {
                if (goal.getDiscovered()) {
                    discoveredByBlue++;
                }
            }

            // count discovered goals by red team
            foreach (var goal in MyGlobals.goalsRed)
            {
                if (goal.getDiscovered())
                {
                    discoveredByRed++;
                }
            }

            // determine winner
            if ((discoveredByBlue == MyGlobals.nrGoals) && (discoveredByRed == MyGlobals.nrGoals))
            {
                return 't';
            }
            else if (discoveredByBlue == MyGlobals.nrGoals)
            {
                return 'b';
            }
            else if (discoveredByRed == MyGlobals.nrGoals)
            {
                return 'r';
            }
            else {
                return 'n';
            }
        }


        // finish game
        public void finishGame() {
            if (determineWinner() == 'r' || determineWinner() == 'b' || determineWinner() == 't') {
                ongoing = false;
            }
        }

        // terminate game and close the application (in case a player disconnected)
        public void terminateGame() {
            ongoing = false;

            // close the application
            if (System.Windows.Forms.Application.MessageLoop)
            {
                // WinForms app
                System.Windows.Forms.Application.Exit();
            }
            else
            {
                // Console app
                System.Environment.Exit(1);
            }

        }

    }
}
